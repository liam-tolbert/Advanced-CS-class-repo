1) Every node has a color either red or black.

2) Root of tree is always black.

3) There are no two adjacent red nodes (A red node cannot have a red parent or red child).

4) Every path from root to a NULL node has same number of black nodes

black height: Number of noes on some path from any node to a leaf. Leaf nodes are also counted as black nodes
Every RBT with n nodes has height less than or equal to 2logBASE2(n+1)
https://www.geeksforgeeks.org/red-black-tree-set-1-introduction-2/

A chain of 3 nodes is not possible in Red-Black Trees. 


Recoloring: When you change the color of a node from red to black or vice versa

It is always good to insert a node as red and recolor it accordingly instead of trying to recolor it both ways when inserting it as black. 

Rotations:
Pushes one subtree down a level and one subtree up by shifting subtrees sideways to different children of the input node. 
Right rotation: 
11 is the parent
11 becomes 4's right child (hence the name right rotation)
11 retains its other child (left child, 15)
4 still retains its right child. However, since 11 is 4's new right child, the previous left subtree of 4 has to go to 11's left child

	11			4
      /   \		      /	 \
    4      15  --------->    1   11
   / \				/  \
  1   9			       9   15
     / \		      / \
    5  10		     5  10 

Left rotation: 
4 is the parent
4 becomes 11's left child (hence the name left rotation)
4 retains its other child, however (left child, 1) 
11 still retains its right child. However, since 4 is 11's new left child, the previous left subtree of 11 has to go to 4's right child

	4			11
      /	 \		       / \
     1   11  ------------>    4   15
   	/  \                 / \
       9   15               1  9
      / \                     / \
     5  10		     5  10

Recoloring and rotations are how a red-black tree balances itself when trying to follow the rules